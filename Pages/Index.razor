@using System.Runtime.InteropServices.JavaScript
@using julyoc.github.io.Shared.IndexComponents
@page "/"
@inject IScrollHandler _scrollHandler
@inject ILogger<Index> logger
@implements IAsyncDisposable


<PageTitle>Julyoc</PageTitle>

<ResumeComponent></ResumeComponent>

<AboutMeComponent></AboutMeComponent>

<SkillsComponent></SkillsComponent>

<ContactComponent></ContactComponent>

<button @onclick='ScrolltoTop' type="button" data-mdb-ripple="true" data-mdb-ripple-color="light" class="inline-block p-3 bg-complementary text-white font-medium text-xs leading-tight uppercase rounded-full shadow-md hover:bg-red-700 hover:shadow-lg focus:bg-red-700 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-red-800 active:shadow-lg transition duration-150 ease-in-out right-5 @BtnClass fixed bottom-20" id="btn-back-to-top">
    <svg aria-hidden="true" focusable="false" data-prefix="fas" class="w-4 h-4" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
        <path fill="currentColor" d="M34.9 289.5l-22.2-22.2c-9.4-9.4-9.4-24.6 0-33.9L207 39c9.4-9.4 24.6-9.4 33.9 0l194.3 194.3c9.4 9.4 9.4 24.6 0 33.9L413 289.4c-9.5 9.5-25 9.3-34.3-.4L264 168.6V456c0 13.3-10.7 24-24 24h-32c-13.3 0-24-10.7-24-24V168.6L69.2 289.1c-9.3 9.8-24.8 10-34.3.4z"></path>
    </svg>
</button>

@code {

    private string _scrollEventId = null;

    public string BtnClass = "hidden";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await ScrollEventHandler();
    }

    private async Task ScrolltoTop()
    {
        await _scrollHandler.ScrollToPageTopAsync(smooth: true);
    }

    private async Task PageScrolled(ScrollEventArgs args)
    {
        logger.LogInformation("x: {x}, y: {y}", args.X, args.Y);

        if (args.Y >= 100)
        {
            BtnClass = "block";
        } else
        {
            BtnClass = "hidden";
        }

        StateHasChanged();
    }

    private bool _scrollSubscribed = false;
    private async Task ScrollEventHandler()
    {
        if (_scrollSubscribed)
        {
            await _scrollHandler.RemovePageScrollAsync(_scrollEventId);
        }
        else
        {
            _scrollEventId = await _scrollHandler.RegisterPageScrollAsync(PageScrolled);
        }

        _scrollSubscribed = !_scrollSubscribed;
    }

    public async ValueTask DisposeAsync()
    {
        if (_scrollHandler is not null)
        {
            await _scrollHandler.DisposeAsync();
        }
    }
}